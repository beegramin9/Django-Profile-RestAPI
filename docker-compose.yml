# docker-compose 파일은 해당 프로젝트를 위한 모든 configuration을 가지고 있다.
# 쟝고 디펜던시를 가지고있는 이미지 위에 configuration을 맞추기 위해 docker-compose 사용
# sudo docker-compose build

# docker-compose version
version: "3"

services:
  # app service
  # 원래 sh -c 안써도 되는데 밑에 command에서 쓰게 만들어놓음
  # docker-compose run 돌리고싶은서비스이름 sh -c 리눅스에서돌려질command
  # 그래서 sudo docker-compose run app sh -c "django-admin.py startproject app ."
  # 뒤에 command는 이제 쟝고 CLI의 영역
  # ex) 버전확인:
  app:
    build:
      # 현재 디렉토리 .
      context: .
    # 내 로컬 머신의 port를 8000으로, 내 이미지의 port를 8000으로
    ports:
      - "8000:8000"
    # volume은 내가 만든 도커 이미지 안에서 리얼타임으로 업데이트 가능하게 함
    # 도커 이미지 configuration을 위한 nodemon 같은 것, 재시작할 필요 없음
    volumes:
      # 현재 디렉토리 ./app 을 도커 디렉토리 /app에 매칭
      - ./app:/app
    # 도커 내의 app을 run할때 쓰이는 command 설정
    # 이 커맨드를 직접 치는게 아니라
    # 내가 sudo docker-compose up을 하면 알아서 실행한다
    # 영상에서는 migrate를 따로 했지만 여기선 같이 할거임
    # migration 가능하게
    # sh: shell -c: run command
    command: >
      sh -c " python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000"

  ##  environment:
  ##    # 내 db와 이름이 같아야 한다. 즉 아래 db를 그대로 쓰면 된다
  ##    - DB_HOST=db
  ##    # POSTGRES_DB와 같음
  ##    - DB_NAME=app
  ##    # POSTGRES_USER
  ##    - DB_USER=postgres
  ##    # POSTGRES_PASSWORD
  ##    - DB_PASS=supersecretpassword

  # 위에 환경변수를 추가한 다음
  # depends_on 은 한 serive가 다른 service에 depend on 가능하게 함
  # app이 db에 depend하게됨
  # app에서 db가 accessible
  # db가 app 시작 전에 먼저 시작되고
  # host 이름을 db로 하면 데이터베이스 서버가 온라인으로 available해짐
  ##   depends_on:
  # 밑에 있는 db service
  ##    - db
  # 다른 service도 쓸 수 있다.

  # db service 설정을 먼저 추가한 다음 위 app에 환경변수를 추가하는 순서
  # db를 추가하려면 써야 하는 명령어

  ## db:
  ##   image: postgres:10-alpine
  ##   # DB이름, username, password
  ##   environment:
  ##     # 대문자 그대로 써줘야 함
  ##     - POSTGRES_DB=app
  ##     - POSTGRES_USER=postgres
  ##     # production할때는 encrypt된 환경변수를 입력할 것.
  ##     - POSTGRES_PASSWORD=supersecretpassword

# Docker와 communicate하게 해주는 파이썬 패키지를
# Docker File 디펜던시에 넣어주면 된다.
